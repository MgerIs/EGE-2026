from re import *


data = " sjfhuifhpfwf Роза в саду"
pattern = r"Роза"

# res = match(pattern, data) # Проверяет начинается ли data с шаблона pattern
# print(res.group()) # Выводит содержимое найденной подстроки
# print(res.span()) # Выводит индексы найденной подстроки
# print(res.start()) # Выводит начальный индекс найденной подстроки
# print(res.end()) # Выводит конечный индекс найденной подстроки


res2 = search(pattern, data) # Находит первое слева вхождение возващает match - обьект
print(res2)

data2 = "BABABABABABABABA"
pattern2 = r"BAB"
matches = finditer(pattern2, data2) #ищет все непересекающиеся совпадения регулярного выражения в строке.
#Она возвращает итератор, содержащий в себе match-объекты каждого найденного совпадения
print([ m.group() for m in matches])


matches2 = findall(pattern2, data2) #ищет все непересекающиеся совпадения регулярного выражения в строке.
#В отличие от finditer(), возвращает список строк или кортежей, содержащих найденные совпадения.
print(matches2)

matches3 = sub(pattern2, "BOB",data2)
print(matches3)
# МЕТАСИМВОЛЫ

# . - один любой символ

data4 = "КОТ КАТ КИТ K0T"
pattern4 = "К.Т"
print(findall(pattern4, data4))

# /d - любая цифра

pattern5 = "K/dT"
print(findall(pattern5, data4))

# /d - любая нецифра
# /s - любой пробельный символ(ENTER, SPACE, TAB)
# \S – любой НЕ пробельный символ
# \w – любая буква, цифра или _
# \b – граница слова
# \В – НЕ граница слова
    

# [0-9] – цифры от 0 до 9
# [a-z] – латинский алфавит в нижнем регистре
# [A-Z] – латинский алфавит в верхнем регистре
# [0-9a-zA-Z] – все цифры и буквы
# [а-яё] – кириллица в нижнем регистре
# ^ - исключающий символ
# [^0-9] – НЕ цифры от 0 до 9

# Количество символов можно указывать в виде диапазона «{m, n}»,
# что будет значить от m до n повторений предыдущего символа включительно.

# +  /  {1,} – хотя бы одно вхождение
# *  /  {0,} – любое кол-во вхождений
# ? – либо 0, либо 1 раз
