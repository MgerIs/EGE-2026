# isalpha - возвращает true, если все символы непустой строки - это буквы
st1 = "hello"
print(st1.isalpha())
# isdigit - возвращает true, если все символы непустой строки - это цифры
st2 = "1443"
print(st2.isdigit())
# isalnum - возвращает true, если все символы непустой строки это - буквы и цифры
st3 = "ugf738f8qwc8f7"
print(st3.isalnum())
# isspace - возвращает true, если все символы непустой строки это - пробелы
st4 = "                         "
print(st4.isspace())
# isupper()/islower() - возвращает true, если все символы непустой строки это символы в верхнем/нижнем регистре(в том числе могут быть цифры и пробелы)
st5 = "ewiofhewifhwio"
st6 = "ROHJWRUIFGUWERIGWEU"
print(st5.islower())
print(st6.isupper())
st = "Имя.Фамилия.Отчество"
print(st.split("."))
# string.split(разделитель sep, кол-во разделений maxsplit)
#
# Разделяет строку string на подстроки, используя sep как разделитель
# и возвращает список этих подстрок.
#
# Если параметр sep не указан, то считается, что он равен пробелу. Если указан параметр maxsplit, то делается не более maxsplit разбиений (т.е. список содержит maxsplit+1 строку).
#
# Параметр sep может содержать больше одного символа.
# partition - разбивает строку на три подстроки и возвращает кортеж из трех эл-тов:
st7 = ("Имя.Фамилия.Отчество")
print(st7.partition("."))
# join - возвращает строку, собранную из элементов последовательности
# string.join(iterable)
# применяется к строке string, которая будет вставлена между элементами последовательности iterable
#  strip()
#  возвращает копию строки, с обоих концов которой удалены указанные символы
#  По умолчанию удаляются пробелы
#  Методы rstrip() и lstrip() работают аналогично, но удаляют символы только с правого или левого конца, соответственно.


#replace()
# string.replace(old, new, count)
# Возвращает копию строки string, в которой все элементы old заменены на new
# Параметр count указывает, сколько элементов old необходимо заменить




